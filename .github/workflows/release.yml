name: ðŸ”¨ Build & Release

# Trigger on new semver tags, or you can add `workflow_dispatch:` for manual runs
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Import Signing Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.CERT_P12_BASE64 }}
          p12-password: ${{ secrets.CERT_P12_PASSWORD }}
          keychain: signing_temp
          keychain-password: ${{ secrets.CERT_P12_PASSWORD }}

      - name: Add build.keychain to search path
        run: |
          security list-keychains -d user -s "$HOME/Library/Keychains/signing_temp.keychain-db" "$HOME/Library/Keychains/login.keychain-db"

      - name: Show current keychain search path
        run: security list-keychains -d user

      - name: List Codesigning Identities
        run: security find-identity -v -p codesigning

      - name: Unlock build.keychain
        run: |
          security unlock-keychain -p "${{ secrets.CERT_P12_PASSWORD }}" "$HOME/Library/Keychains/signing_temp.keychain-db"

      - name: Archive Release Build
        env:
          DEVELOPMENT_TEAM: ${{ secrets.CODE_SIGN_DEVELOPMENT_TEAM_ID }}
          CODE_SIGN_IDENTITY: "Developer ID Application: David Oliver (ZV389CJJBX)"
        run: |
          xcodebuild archive \
            -project MetalHUDHelper.xcodeproj \
            -scheme MetalHUDHelper \
            -configuration Release \
            -archivePath $PWD/build/MetalHUDHelper.xcarchive \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY \

      - name: Export .app Bundle
        run: |
          xcodebuild -exportArchive \
            -archivePath $PWD/build/MetalHUDHelper.xcarchive \
            -exportPath $PWD/build \
            -exportOptionsPlist ExportOptions.plist

      - name: Create DMG
        run: |
          brew install create-dmg

          mkdir -p dmg_temp
          ln -s /Applications dmg_temp/Applications
          cp -r build/MetalHUDHelper.app dmg_temp/

          create-dmg \
            --volname 'MetalHUDHelper' \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon 'MetalHUDHelper.app' 200 190 \
            --app-drop-link 600 190 \
            --no-internet-enable \
            build/MetalHUDHelper.dmg \
            dmg_temp

      - name: Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.NOTARY_TOOL_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.CODE_SIGN_DEVELOPMENT_TEAM_ID }}
        run: |
          xcrun notarytool submit build/MetalHUDHelper.dmg \
          --apple-id "$APPLE_ID" \
          --password "$APP_SPECIFIC_PASSWORD" \
          --team-id "$TEAM_ID" \
          --wait --output-format json > notary.json

      - name: Dump Notary Log on Failure
        if: steps.notarize.outcome != 'success'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.NOTARY_TOOL_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.CODE_SIGN_DEVELOPMENT_TEAM_ID }}
        run: |
          LOG_ID=$(jq -r .id notary.json)
          echo "Notarization failed; fetching log for ID $LOG_ID"
          xcrun notarytool log $LOG_ID \
          --apple-id "$APPLE_ID" \
          --password "$APP_SPECIFIC_PASSWORD" \
          --team-id "$TEAM_ID"
      - name: Staple the DMG
        if: steps.notarize.outcome == 'success'
        run: |
          echo "Notarization succeeded; stapling the DMG"
          xcrun stapler staple build/MetalHUDHelper.dmg
      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract tag name without refs/tags/ prefix
            TAG=${GITHUB_REF#refs/tags/}
            
            echo "Creating release for tag: $TAG"
            gh release create "$TAG" \
              --title "$TAG" \
              --notes "## Release Notes" \
              build/MetalHUDHelper.dmg
          else
            echo "Not running on a tag, skipping release creation"
          fi
